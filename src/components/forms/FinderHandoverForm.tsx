import React, { useState } from 'react'
import type { Item } from '../../types'
import { uid, todayISO } from '../../utils'
import { Field } from '../ui/Field'
import { Input } from '../ui/Input'
import { Textarea } from '../ui/Textarea'
import { Button } from '../ui/Button'

export const FinderHandoverForm: React.FC<{ onAdd: (item: Item) => void; staffName: string }> = ({ onAdd, staffName }) => {
  const [finderName, setFinderName] = useState("")
  const [finderContact, setFinderContact] = useState("")
  const [finderNote, setFinderNote] = useState("")
  const [title, setTitle] = useState("")
  const [category, setCategory] = useState("‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
  const [description, setDescription] = useState("")
  const [locationFound, setLocationFound] = useState("")
  const [dateFound, setDateFound] = useState(todayISO())
  const [storageLocation, setStorageLocation] = useState("")
  const [imageUrl, setImageUrl] = useState("")
  const [storeNow, setStoreNow] = useState(true)
  const [shelfCode, setShelfCode] = useState("")

  const canSubmit = finderName.trim() && title.trim() && locationFound.trim() && storageLocation.trim()

  const submit = () => {
    if (!canSubmit) return
    const base: Item = {
      id: uid(), title: title.trim(), category: category.trim(), description: description.trim() || undefined,
      locationFound: locationFound.trim(), dateFound, storageLocation: storageLocation.trim(), reporter: staffName.trim() || "staff",
      imageUrl: imageUrl.trim() || undefined, status: storeNow ? "STORED" : "FOUND", finderName: finderName.trim(),
      finderContact: finderContact.trim() || undefined, finderNote: finderNote.trim() || undefined, dateHandover: todayISO(),
    }
    const item: Item = storeNow ? { ...base, shelfCode: shelfCode.trim() || undefined, dateStored: todayISO(), storedBy: staffName || "staff" } : base
    onAdd(item)
    setFinderName(""); setFinderContact(""); setFinderNote(""); setTitle(""); setCategory("‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"); setDescription(""); setLocationFound(""); setDateFound(todayISO()); setStorageLocation(""); setImageUrl(""); setStoreNow(true); setShelfCode("")
  }

  return (
    <div className="rounded-3xl border border-slate-200 bg-white p-5 shadow-sm">
      <h2 className="text-lg font-semibold text-slate-900">üì£ ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢ (‡∏ú‡∏π‡πâ‡∏û‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô)</h2>
      <div className="mt-4 grid gap-4">
        <div className="grid gap-3 md:grid-cols-3">
          <Field label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏ö" required><Input value={finderName} onChange={(e) => setFinderName(e.target.value)} placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" /></Field>
          <Field label="‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" hint="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•"><Input value={finderContact} onChange={(e) => setFinderContact(e.target.value)} placeholder="080-xxx-xxxx / email" /></Field>
          <Field label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"><Input value={finderNote} onChange={(e) => setFinderNote(e.target.value)} placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" /></Field>
        </div>
        <div className="grid gap-3 md:grid-cols-2">
          <Field label="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á" required><Input value={title} onChange={(e) => setTitle(e.target.value)} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå" /></Field>
          <Field label="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"><Input value={category} onChange={(e) => setCategory(e.target.value)} placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå, ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" /></Field>
          <Field label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö" required><Input value={locationFound} onChange={(e) => setLocationFound(e.target.value)} placeholder="‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏û‡∏ö" /></Field>
          <Field label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö"><Input type="date" value={dateFound} onChange={(e) => setDateFound(e.target.value)} /></Field>
          <Field label="‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö/‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á" required><Input value={storageLocation} onChange={(e) => setStorageLocation(e.target.value)} placeholder="‡∏´‡πâ‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 2" /></Field>
          <Field label="‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"><Input value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} placeholder="https://‚Ä¶" /></Field>
          <div className="md:col-span-2"><Field label="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"><Textarea rows={3} value={description} onChange={(e) => setDescription(e.target.value)} placeholder="‡∏™‡∏µ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ ‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï" /></Field></div>
        </div>
        <div className="grid gap-3 rounded-2xl border border-slate-200 p-3">
          <label className="flex items-center gap-2 text-sm text-slate-700">
            <input type="checkbox" checked={storeNow} onChange={(e) => setStoreNow(e.target.checked)} />‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          </label>
          {storeNow && (<Field label="‡∏ä‡∏±‡πâ‡∏ô/‡∏ä‡πà‡∏≠‡∏á (Shelf Code)" hint="‡πÄ‡∏ä‡πà‡∏ô A-2-03"><Input value={shelfCode} onChange={(e) => setShelfCode(e.target.value)} placeholder="A-2-03" /></Field>)}
        </div>
        <div className="flex items-center justify-end gap-2">
          <Button variant="ghost" onClick={() => { setFinderName(""); setFinderContact(""); setFinderNote(""); setTitle(""); setCategory("‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"); setDescription(""); setLocationFound(""); setDateFound(todayISO()); setStorageLocation(""); setImageUrl(""); setStoreNow(true); setShelfCode(""); }}>‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°</Button>
          <Button onClick={submit} disabled={!canSubmit}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö</Button>
        </div>
      </div>
    </div>
  )
}
