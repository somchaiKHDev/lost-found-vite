import React, { useState } from 'react'
import type { Item } from '../types'
import { Button } from './ui/Button'
import { Field } from './ui/Field'
import { Input } from './ui/Input'
import { Badge } from './ui/Badge'

export const ItemCard: React.FC<{ item: Item; onClaim: (id: string, claimer: string) => void; onDelete: (id: string) => void; onStore: (id: string, shelf: string, storedBy: string) => void; staffName: string; onOpenDetails: (id: string) => void; onOpenAnnPreview: (id: string) => void; onEditRequest: (item: Item) => void; annCount?: number; }>
  = ({ item, onClaim, onDelete, onStore, staffName, onOpenDetails, onOpenAnnPreview, onEditRequest, annCount = 0 }) => {
  const [who, setWho] = useState("")
  const [shelf, setShelf] = useState(item.shelfCode || "")

  return (
    <div className="grid gap-3 rounded-3xl border border-slate-200 bg-white p-5 shadow-sm">
      <div className="flex items-start justify-between gap-2">
        <div className="min-w-0">
          <h3 className="truncate text-base font-semibold text-slate-900">{item.title}</h3>
          <div className="mt-1 flex flex-wrap items-center gap-2 text-xs text-slate-600">
            <Badge>{item.category}</Badge>
            {item.status === "FOUND" && <Badge tone="warning">FOUND</Badge>}
            {item.status === "STORED" && <Badge tone="info">STORED</Badge>}
            {item.status === "CLAIMED" && <Badge tone="success">CLAIMED</Badge>}
            <span>‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ {item.dateFound}</span>
            <span>‡∏ó‡∏µ‡πà {item.locationFound}</span>
            {item.finderName && <Badge tone="info">‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏û‡∏ö</Badge>}
            {annCount > 0 && (
              <button type="button" onClick={() => onOpenAnnPreview(item.id)}
                title={annCount === 1 ? '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß' : `‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß (${annCount})`}
                aria-label={annCount === 1 ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' : `‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (${annCount})`}
                className="inline-flex items-center gap-1 rounded-full bg-sky-50 px-2 py-0.5 text-xs font-medium text-sky-800 ring-1 ring-sky-200 hover:bg-sky-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-300">
                <span aria-hidden>üìú</span><span>‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß{annCount > 1 ? ` (${annCount})` : ''}</span>
              </button>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" onClick={() => onOpenDetails(item.id)}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Button>
          <Button variant="ghost" onClick={() => onEditRequest(item)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
          <Button variant="danger" onClick={() => onDelete(item.id)}>‡∏•‡∏ö</Button>
        </div>
      </div>

      {item.status === "FOUND" && (
        <div className="grid gap-3 md:grid-cols-2">
          <div className="grid gap-2 rounded-2xl border border-slate-200 p-3">
            <div className="text-sm font-semibold text-slate-900">üì¶ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á</div>
            <Field label="‡∏ä‡∏±‡πâ‡∏ô/‡∏ä‡πà‡∏≠‡∏á (Shelf Code)" hint="‡πÄ‡∏ä‡πà‡∏ô A-2-03">
              <Input value={shelf} onChange={(e) => setShelf(e.target.value)} placeholder="A-2-03" />
            </Field>
            <div className="flex items-center gap-2">
              <Button onClick={() => shelf.trim() && onStore(item.id, shelf.trim(), staffName || "staff")} disabled={!shelf.trim()}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß</Button>
            </div>
          </div>
          <div className="grid gap-2 rounded-2xl border border-slate-200 p-3">
            <div className="text-sm font-semibold text-slate-900">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô</div>
            <Field label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô" hint="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å">
              <Input value={who} onChange={(e) => setWho(e.target.value)} placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" />
            </Field>
            <div className="flex items-center gap-2">
              <Button onClick={() => who.trim() && onClaim(item.id, who.trim())} disabled={!who.trim()}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô</Button>
            </div>
          </div>
        </div>
      )}

      {item.status === "STORED" && (
        <div className="grid gap-2 rounded-2xl border border-slate-200 p-3">
          <div className="text-sm font-semibold text-slate-900">‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô</div>
          <Field label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô" hint="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å">
            <Input value={who} onChange={(e) => setWho(e.target.value)} placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" />
          </Field>
          <div className="flex items-center gap-2">
            <Button onClick={() => who.trim() && onClaim(item.id, who.trim())} disabled={!who.trim()}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô</Button>
          </div>
        </div>
      )}
    </div>
  )
}
